diff --git a/src/util/pup.h b/src/util/pup.h
index 0cf0043..61fecbe 100644
--- a/src/util/pup.h
+++ b/src/util/pup.h
@@ -55,6 +55,7 @@ class bar {
 #define __CK_PUP_H
 
 #include <stdio.h> /*<- for "FILE *" */
+#include <type_traits>
 
 #ifndef __cplusplus
 #error "Use pup_c.h for C programs-- pup.h is for C++ programs"
@@ -703,6 +704,11 @@ public:
     PUPable_decl_inside_template(SINGLE_ARG(className))   \
     PUPable_operator_inside(SINGLE_ARG(className))
 
+#define PUPable_decl_base_template(baseClassName, className)                   \
+  PUPable_decl_inside_base_template(SINGLE_ARG(baseClassName),                 \
+                                    SINGLE_ARG(className))                     \
+      PUPable_operator_inside(SINGLE_ARG(className))
+
 //PUPable_decl for classes inside a namespace: inside body
 #define PUPable_decl_inside(className) \
 private: \
@@ -723,6 +729,22 @@ public: \
     static void register_PUP_ID(const char* name) { \
         my_PUP_ID=register_constructor(name,call_PUP_constructor);}
 
+#define PUPable_decl_inside_base_template(baseClassName, className)            \
+private:                                                                       \
+  static PUP::able *call_PUP_constructor(void) {                               \
+    return new className((CkMigrateMessage *)0);                               \
+  }                                                                            \
+  static PUP::able::PUP_ID my_PUP_ID;                                          \
+                                                                               \
+public:                                                                        \
+  virtual const PUP::able::PUP_ID &get_PUP_ID(void) const {                    \
+    return my_PUP_ID;                                                          \
+  }                                                                            \
+  static void register_PUP_ID(const char *name) {                              \
+    my_PUP_ID =                                                                \
+        baseClassName::register_constructor(name, call_PUP_constructor);       \
+  }
+
 //PUPable_decl for classes inside a namespace: in header at file scope
 #define PUPable_decl_outside(className) \
      PUPable_operator_outside(className)
@@ -907,11 +929,29 @@ template<class T> inline void PUParray(PUP::er &p,T *t,size_t n) { \
 /**
   Default operator|: call pup routine.
 */
-template<class T>
-inline void operator|(PUP::er &p,T &t) { 
-	p.syncComment(PUP::sync_begin_object);
-	t.pup(p);
-	p.syncComment(PUP::sync_end_object); 
+namespace charm_pup_details {
+
+template <typename... Ts>
+struct make_void {
+  using type = void;
+};
+template <typename... Ts> using void_t = typename make_void<Ts...>::type;
+
+template <typename T, typename U = void> struct is_pupable : std::false_type {};
+
+template <typename T>
+struct is_pupable<
+    T, void_t<decltype(std::declval<T>().pup(std::declval<PUP::er &>()))>>
+    : std::true_type {};
+
+}  // namespace charm_pup_details
+
+template <class T, typename std::enable_if<
+                       charm_pup_details::is_pupable<T>::value, int>::type = 0>
+inline void operator|(PUP::er &p, T &t) {
+  p.syncComment(PUP::sync_begin_object);
+  t.pup(p);
+  p.syncComment(PUP::sync_end_object);
 }
 
 /**
diff --git a/src/util/pup_stl.h b/src/util/pup_stl.h
index 1f1d9e5..6fc96e4 100644
--- a/src/util/pup_stl.h
+++ b/src/util/pup_stl.h
@@ -46,10 +46,6 @@ namespace PUP {
   inline void operator|(er &p,typename std::pair<const A,B> &v);
   template <class T>
   inline void operator|(er &p,std::complex<T> &v);
-#if !CMK_USING_XLC
-  template <class T>
-  inline void operator|(er &p, std::unique_ptr<T, std::default_delete<T>> &ptr);
-#endif
   template <class charType>
   inline void operator|(er &p,typename std::basic_string<charType> &v);
   inline void operator|(er &p,std::string &v);
@@ -109,21 +105,6 @@ namespace PUP {
     p|re; p|im;
     v=std::complex<T>(re,im);
   }
-#if !CMK_USING_XLC
-  template <class T>
-  inline void operator|(er &p, std::unique_ptr<T, std::default_delete<T>> &ptr)
-  {
-    bool nonNull = static_cast<bool>(ptr);
-    p|nonNull;
-
-    if (nonNull) {
-      if (p.isUnpacking())
-        ptr.reset(new T);
-
-      p|(*ptr);
-    }
-  }
-#endif
   template <class charType> 
   inline void operator|(er &p,typename std::basic_string<charType> &v)
   {
@@ -254,17 +235,6 @@ namespace PUP {
   inline void operator|(er &p,typename std::map<V,T,Cmp> &m)
   //{ PUP_stl_map<std::map<V,T,Cmp>,std::pair<const V,T> >(p,m); }    // 'const' confuses old version of a SUN CC compiler
   { PUP_stl_map<std::map<V,T,Cmp>,std::pair<V,T> >(p,m); }
-#if !CMK_USING_XLC
-  template <class V,class T,class Cmp>
-  inline void operator|(er &p,typename std::unordered_map<V,T,Cmp> &m)
-  //{ PUP_stl_map<std::unordered_map<V,T,Cmp>,std::pair<const V,T> >(p,m); }    // 'const' confuses old version of a SUN CC compiler
-  { PUP_stl_map<std::unordered_map<V,T,Cmp>,std::pair<V,T> >(p,m); }
-#else
-  template <class V,class T,class Cmp>
-  inline void operator|(er &p,typename std::tr1::unordered_map<V,T,Cmp> &m)
-  //{ PUP_stl_map<std::unordered_map<V,T,Cmp>,std::pair<const V,T> >(p,m); }    // 'const' confuses old version of a SUN CC compiler
-  { PUP_stl_map<std::tr1::unordered_map<V,T,Cmp>,std::pair<V,T> >(p,m); }
-#endif
   template <class V,class T,class Cmp> 
   inline void operator|(er &p,typename std::multimap<V,T,Cmp> &m)
   { PUP_stl_map<std::multimap<V,T,Cmp>,std::pair<const V,T> >(p,m); }
